####data options and feature extraction options
#Only one of the following three inputs are used each run. The priority goes like this: predicted > problem > instances > input.
#This is done to save time when similar data is used and only some parameters change.
data.input=.../inputdata
#Instances is just a bag of words
data.instances=
#Problem contains feature vectors and categories vectors. Everything that is needed to run SVM.
data.problem=
##The same level of input should be provided for the test set as well!
data.model=
data.test.input=
data.test.instances=
data.test.problem=
#Extracts statistics from predicted values file
data.predictionsFile=

#possible values for data.model are 1) bow 2) brown 3) word2vec
data.model=brown
#remember that instances contain the alphabet
data.saveInstances=false
data.saveProblem=false
data.removeStopwords=false

####Parameters -------------------------------

#classifier
clf.type=svm
clf.svm.type=C
clf.svm.kernel=linear
clf.svm.C=0.1

#BOW
#binary or count
bow.type=binary

#Brown
#path to wcluster application paths file
data.brown.paths=.../paths
brown.cutoff=0
#true or false. Combines brown and bow features 
brown.plus_bow=true
#true or false. Does not consider hierarchical paths. Only leaf clusters 
brown.only_clusters=false
#applies tf-idf
brown.tfidf=true

##You can specify the task of the classifier. It can be either crossValidation, train a model and predict.
##Only one of them can be completed each time. If more that one is true the priority is crossValidation > train-predict
#use cross validation for experiments
clf.crossValidation=true
clf.crossValidation.folds=10
#should be both false or both true
clf.train=false
clf.predict=false
#The output of train
clf.predict.model=


####output
general.outputDir=...outputDir/
